// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 	String  						@id @default(cuid())
  userId             	String  						@map("user_id")
  type               	String
  provider           	String
  providerAccountId  	String  						@map("provider_account_id")
  refresh_token      	String?
  access_token       	String?
  expires_at         	Int?
  token_type         	String?
  scope              	String?
  id_token           	String?
  session_state      	String?
  oauth_token_secret 	String?
  oauth_token        	String?

  user 								User 								@relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           				String  						@id @default(cuid())
  sessionToken 				String   						@unique @map("session_token")
  userId       				String   						@map("user_id")
  expires      				DateTime
  user         				User     						@relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            			String    					@id @default(cuid())
  name          			String?
  email         			String?   					@unique
  emailVerified 			DateTime? 					@map("email_verified")
  image         			String?
  accounts      			Account[]
  sessions      			Session[]

  favorites 					UnsplashFavorite[]
  recentQueries       RecentQuery[]
}

model VerificationToken {
  id         					Int      						@id @default(autoincrement())
  identifier 					String
  token      					String   						@unique
  expires    					DateTime

  @@unique([identifier, token])
}

model UnsplashPhotoUrl {
  id       						String 							@id @default(cuid())
  full     						String
  raw      						String
  regular  						String
  small    						String
  small_s3 						String
  thumb    						String

	photo								UnsplashPhoto				@relation(fields: [photoId], references: [id])
	photoId							String							@unique	@map("photo_id")
}

model UnsplashPhotoLink {
  id                	String 							@id @default(cuid())
  self              	String
  html              	String
  download          	String
  download_location 	String

	photo								UnsplashPhoto				@relation(fields: [photoId], references: [id])
	photoId							String							@unique @map("photo_id")
}

model UnsplashPhoto {
  id                  String              @id @default(cuid())
  created_at      		String
  updated_at      		String
  alt_description 		String?
  blur_hash       		String?
  color           		String?
  description     		String?
  height          		Int
  likes           		Int
  promoted_at     		String?
  width           		Int
  
	urls								UnsplashPhotoUrl?

	links								UnsplashPhotoLink?

	userId							String							@unique
  user								UnsplashUser				@relation(fields: [userId], references: [id])

  favorites       		UnsplashFavorite[]
}

model UnsplashFavorite {
  id                	String 							@id @default(cuid())
  userId  						String 							@map("user_id")
  photoId 						String 							@map("photo_id")

  user  							User          			@relation(fields: [userId], references: [id], onDelete: Cascade)
  photo 							UnsplashPhoto 			@relation(fields: [photoId], references: [id], onDelete: Cascade)

  @@unique(fields: [userId, photoId], name: "userPhotoId")
}

model UnsplashUserProfileImage {
  id     							String 							@id @default(cuid())
  userId 							String 							@unique @map("user_id")
  small  							String
  medium 							String
  large  							String

  user 								UnsplashUser 				@relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UnsplashUser {
  id                 	String              @id @default(cuid())
  bio                	String?
  first_name         	String
  instagram_username 	String?
  last_name          	String?
  location           	String?
  name               	String
  portfolio_url      	String?
  profile_image      	UnsplashUserProfileImage?
  total_collections   Int
  total_likes        	Int
  total_photos       	Int
  twitter_username   	String?
  username           	String
  accepted_tos       	Boolean             @default(false)
  
  photos							UnsplashPhoto[]
}

model RecentQuery {
  id                  String              @id @default(cuid())
  query               String
  timestamp           DateTime            @default(now()) @updatedAt

  userId              String              @map("user_id")
  user								User				        @relation(fields: [userId], references: [id])

  @@unique(fields: [query, userId], name: "queryUserId")
}